
In TeacherController : 

public async Task<ActionResult<Teacher>>GetTeacherById(int id)   --> endpoint 1


 public async Task<ActionResult<Teacher>> CreateTeacher(Teacher teacher) --> endpoint 2
     return CreatedAtAction(nameof(GetTeacherById), new {id= teacher.Id, teacher});

het voordeel van nameof(GetTeacherById) is nu: dat waneer GetTeacherById van naam verandert in endpoint 1:
de naam in enpoint 2 van GetTeacherById , automatisch mee veranderd.

----------------------------------------------------------

string interpolation voorbeeld :

if (studentInDb == null) {
   throw new KeyNotFoundException($"Student with id {id} was not found.");//string interpolation
}

----------------------------------------------------------
var courseInDb = await _context.Courses.FindAsync(id)
                ?? throw new KeyNotFoundException($"course with id {id} was not found."); //coalesce expression

--------------------------------------------------------------


een constructor aanmaken -> ctor tab 
een property aanmaken --> prop tab 

-------------------------------------------------------------
IEnumerable vs IList vs ICollection :


--------------------------------------------------------------

  private readonly ICourseRepository _courseRepository;

        public CourseController(ICourseRepository courseRepository)
        {
            _courseRepository = courseRepository;
        }

  bovenstaande snel aanmaken :

  tik ctor
  vul de parameter aan : ICourseRepository courseRepository
  cursor op courseRepository, kies quick Action: create and assign property


  public CourseController(ICourseRepository courseRepository)
        {
 
        }

-----------------------------------------------------------

input!.SumOfEvenNumbes -> != null forgiving operator

-------------------------------------------------------------