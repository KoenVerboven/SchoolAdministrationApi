Make entity framwork work with sql-server :

installeer volgende nuget-packets:

microsoft.entityframeworkcore\9.0.0
microsoft.entityframeworkcore.inmemory\9.0.0  (is niet meer nodig en mag verwijdert worden)
microsoft.entityframeworkcore.sqlserver\9.0.0
entityframeworkcore.tools\9.0.0  (anders kunnen we geen commandos intikken in de Package Manager Console)





in Program.cs :

useSqlServer

en vul de connectie string in

  var builder = WebApplication.CreateBuilder(args);

  builder.Services.AddDbContext<AppDbContext>(
      options => options.UseSqlServer("Data Source=KOENI7;Initial Catalog=School2;Integrated Security=True;TrustServerCertificate=True;")
      );






Om er voor te zorgen dat de map 'Migrations' verschijnt in ons project:

open de Package Manager Console.
(Kies Tools - NuGet package Manager -  Package Manager Console)

tik nu in : 

Add-Migration InitialMigration

--> de map Migration, met hieronder de migration-files worden aangemaakt

update-Database

-> in sql server wordt nu de database 'School2' aangemaakt met hierin onze tabel Student.

---------------------------------------------------------------------------

using Microsoft.EntityFrameworkCore;
using SchoolAdministration.Models;

namespace SchoolAdministration.Data
{
    public class AppDbContext : DbContext
    {
        public DbSet<Student> Students { get; set; }
        
        public AppDbContext(DbContextOptions<AppDbContext> options)
            :base(options)
        {
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            base.OnConfiguring(optionsBuilder);
        }

    }
}

-----------------------------------------------------------------------
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.SqlServer;
using SchoolAdministration.Data;
using SchoolAdministration.Repositories;

namespace SchoolAdministration
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var builder = WebApplication.CreateBuilder(args);

            builder.Services.AddDbContext<AppDbContext>(
                options => options.UseSqlServer("Data Source=KOENI7;Initial Catalog=School2;Integrated Security=True;TrustServerCertificate=True;")
                );

            builder.Services.AddCors(options =>
            {
                options.AddPolicy("MyCors", builder =>
                {
                    builder.WithOrigins("http://localhost:4200")
                    .AllowAnyMethod()
                    .AllowAnyHeader();
                });
            });

            //add the student repository to the DI (dependency injection)
            builder.Services.AddScoped<IStudentRepository, StudentRepository>();

            builder.Services.AddControllers();

            builder.Services.AddEndpointsApiExplorer();

            builder.Services.AddSwaggerGen();

            builder.Services.AddScoped<AppDbContext>();//toegevoegd

            var app = builder.Build();

            var entities = app.Services.CreateScope().ServiceProvider.GetRequiredService<IStudentRepository>();//toegevoegd
            

            if(app.Environment.IsDevelopment())
            {
                app.UseSwagger();
                app.UseSwaggerUI(c=>
                {
                    c.SwaggerEndpoint("/swagger/v1/swagger.json", "API V1");
                    c.RoutePrefix = string.Empty;
                });
            }

            app.UseCors("MyCors");  

            app.MapControllers();

            app.Run();
        }
    }
}

--------------------------------------------

na het toevoegen van nieuwe velden in de student classe : 

Add-Migration AddAdditionalFieldsToStudent

Remove-Migration --> als we de migratie terug willen draaien.

update-Database



