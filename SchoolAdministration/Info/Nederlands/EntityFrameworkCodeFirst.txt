Make entity framwork work with sql-server :

installeer volgende nuget-packets:

microsoft.entityframeworkcore\9.0.0
microsoft.entityframeworkcore.inmemory\9.0.0  (is niet meer nodig en mag verwijdert worden)
microsoft.entityframeworkcore.sqlserver\9.0.0
entityframeworkcore.tools\9.0.0  (anders kunnen we geen commandos intikken in de Package Manager Console)


in Program.cs :

useSqlServer

en vul de connectie string in

  var builder = WebApplication.CreateBuilder(args);

  builder.Services.AddDbContext<AppDbContext>(
      options => options.UseSqlServer("Data Source=KOENI7;Initial Catalog=School2;Integrated Security=True;TrustServerCertificate=True;")
      );



Om er voor te zorgen dat de map 'Migrations' verschijnt in ons project:

open de Package Manager Console.
(Kies Tools - NuGet package Manager -  Package Manager Console)

tik nu in : 

Add-Migration InitialMigration

--> de map Migration, met hieronder de migration-files worden aangemaakt

update-Database

-> in sql server wordt nu de database 'School2' aangemaakt met hierin onze tabel Student.

---------------------------------------------------------------------------

using Microsoft.EntityFrameworkCore;
using SchoolAdministration.Models;

namespace SchoolAdministration.Data
{
    public class AppDbContext : DbContext
    {
        public DbSet<Student> Students { get; set; }
        
        public AppDbContext(DbContextOptions<AppDbContext> options)
            :base(options)
        {
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            base.OnConfiguring(optionsBuilder);
        }

    }
}

-----------------------------------------------------------------------
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.SqlServer;
using SchoolAdministration.Data;
using SchoolAdministration.Repositories;

namespace SchoolAdministration
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var builder = WebApplication.CreateBuilder(args);

            builder.Services.AddDbContext<AppDbContext>(
                options => options.UseSqlServer("Data Source=KOENI7;Initial Catalog=School2;Integrated Security=True;TrustServerCertificate=True;")
                );

            builder.Services.AddCors(options =>
            {
                options.AddPolicy("MyCors", builder =>
                {
                    builder.WithOrigins("http://localhost:4200")
                    .AllowAnyMethod()
                    .AllowAnyHeader();
                });
            });

            //add the student repository to the DI (dependency injection)
            builder.Services.AddScoped<IStudentRepository, StudentRepository>();

            builder.Services.AddControllers();

            builder.Services.AddEndpointsApiExplorer();

            builder.Services.AddSwaggerGen();

            builder.Services.AddScoped<AppDbContext>();//toegevoegd

            var app = builder.Build();

            var entities = app.Services.CreateScope().ServiceProvider.GetRequiredService<IStudentRepository>();//toegevoegd
            

            if(app.Environment.IsDevelopment())
            {
                app.UseSwagger();
                app.UseSwaggerUI(c=>
                {
                    c.SwaggerEndpoint("/swagger/v1/swagger.json", "API V1");
                    c.RoutePrefix = string.Empty;
                });
            }

            app.UseCors("MyCors");  

            app.MapControllers();

            app.Run();
        }
    }
}

--------------------------------------------

na het toevoegen van nieuwe velden in de student classe : 

Add-Migration AddAdditionalFieldsToStudent

Remove-Migration --> als we de migratie terug willen draaien.

update-Database

------------------------------------------------
MANY TO MANY relationship

tussen Student en Course

AddStudentCourseRelationship = vrij te kiezen naam, geeft duidelijk aan wat de betreffende update bewerkstelligd.

de tussen-table 'CourseStudent' wordt nu automatisch aangemaakt.

Dit komt doordat we onderstaande properties hebben toegevoegd :

model Student:
->  public ICollection<Course> Courses { get; set; }

model Course:
-> public ICollection<Student> Students { get; set; }

Add-Migration "AddStudentCourseRelationship"
Update-Database
-----------------------------------------------
ONE TO MANY relationship

tussen StudyPlan en StudyPlanPart



model StudyPlan:
public int Id { get; set; }
..
public ICollection<StudyPlanPart>? StudyPlanParts { get; set; } -> wordt ook 'Navigation property' genoemd

model StudyPlanPart:
[Key] --> Attribuut voor primary key.Dit hoeft hier in principe niet als we Id als naam gebuiken.
Als we bv StudyPlanPartId zouden gebruiken moet dit wel!
public int Id { get; set; }
public int StudyPlanId { get; set; } --> dit wordt een foreign key in de database. Hou je wel aan de naamgeving : tabel (hier: StudyPlan) + Id

Het is belangrijk om bij de benaming van de pk en fk, aan de naming conventions te houden.
https://learn.microsoft.com/en-us/ef/ef6/modeling/code-first/conventions/built-in

Voeg toe in de contextClass (AppDbContext) :
 public DbSet<StudyPlan> StudyPlans { get; set; }
 public DbSet<StudyPlanPart> StudyPlanParts { get; set; }

 opmerking:
 de controller voor beide tabellen is niet nodig om te tabelen aan te maken in de database.
 Een controller en endpoints zijn natuurlijk wel nodig om deze endpoint in swagger te laten verschijnen.

Voer uit in Package Manager Console:
Add-Migration "AddStudyPlanAndStudyPlanPart"
Update-Database

SQL-server:
Nu zijn beide tabellen en de meer op 1 relatie toegevoegd in database.

 TABLE [dbo].[Students](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[FirstName] [nvarchar](30) NOT NULL,
	[LastName] [nvarchar](30) NOT NULL,
	[Email] [nvarchar](max) NOT NULL,
	[Phone] [nvarchar](max) NOT NULL,
	[DateOfBirth] [datetime2](7) NULL,
	[Gender] [int] NOT NULL,
	[ParentFirstName] [nvarchar](30) NULL,
	[ParentLastname] [nvarchar](30) NULL,
	[ParentPhoneNumber] [nvarchar](max) NULL,
	[StreetAndNumber] [nvarchar](30) NULL,
	[Zipcode] [int] NULL,
 CONSTRAINT [PK_Students] PRIMARY KEY CLUSTERED 

  TABLE [dbo].[StudyPlanParts](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Start] [datetime2](7) NOT NULL,
	[End] [datetime2](7) NOT NULL,
	[GoalDescription] [nvarchar](max) NOT NULL,
	[Remarks] [nvarchar](max) NOT NULL,
	[StudyObjectiveArchievedInProcent] [int] NOT NULL,
	[StudyPlanId] [int] NOT NULL,
 CONSTRAINT [PK_StudyPlanParts] PRIMARY KEY CLUSTERED 
 ONSTRAINT [FK_StudyPlanParts_StudyPlans_StudyPlanId] FOREIGN KEY([StudyPlanId])  --> foreign key
REFERENCES [dbo].[StudyPlans] ([Id])
ON DELETE CASCADE --> let hier wel mee op, als je dit niet wilt moet dit aangepast worden